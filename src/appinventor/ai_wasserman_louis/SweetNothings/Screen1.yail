#|
$Source $Yail
|#

(define-form appinventor.ai_wasserman_louis.SweetNothings.Screen1 Screen1)
(require <com.google.youngandroid.runtime>)
(def (unfavorableComparison)
 (call-yail-primitive yail-list-pick-random (list (call-yail-primitive make-yail-list (list "buffoon" "child" "duckling" "turducken" "fool")
 '( any any any any any)
 "make a list")
)
 '( list)
 "pick random item")
)
(def (favorableComparison)
 (call-yail-primitive yail-list-pick-random (list (call-yail-primitive make-yail-list (list "blazing sunset" "deep abbiss" "shining light" "child's laugh")
 '( any any any any)
 "make a list")
)
 '( list)
 "pick random item")
)
(def (isPlural word )
 (call-yail-primitive string=? (list (call-yail-primitive string-substring (list (lexical-value word)
 (call-yail-primitive - (list (call-yail-primitive string-length (list (lexical-value word)
)
 '( text)
 "length")
 1)
 '( number number)
 "?")
 1)
 '( text number number)
 "segment")
 "s")
 '( text text)
 "text=")
)
(def noun "")

(def Victim "Grace")

(def isJudge #t)

(def (genericTroll)
(set-var! noun  ((get-var bodyPart))
)

 )
(def (setTheVictim resultList )
(if (and-delayed   (call-yail-primitive >= (list (call-yail-primitive yail-list-length (list (lexical-value resultList)
)
 '( list)
 "length of list")
 2)
 '( number number)
 ">=")
 (call-yail-primitive string=? (list (call-yail-primitive string-to-lower-case (list (call-yail-primitive yail-list-get-item (list (lexical-value resultList)
 1)
 '( list number)
 "select list item")
)
 '( text)
 "downcase")
 "judge")
 '( text text)
 "text=")
)
 (begin (set-var! Victim  (call-yail-primitive yail-list-get-item (list (lexical-value resultList)
 2)
 '( list number)
 "select list item")
)

(if (call-yail-primitive yail-list-member? (list (call-yail-primitive string-to-lower-case (list (get-var Victim)
)
 '( text)
 "downcase")
 (get-var judgeList)
)
 '( any list)
 "is in list?")
 (begin (set-var! isJudge  #t)

((get-var trollJudge))

)
 (begin (if (call-yail-primitive string=? (list (get-var Victim)
 "me")
 '( text text)
 "text=")
 (begin (call-component-method 'TextToSpeech1 'Speak (list "I'm judging you.")
 '( text)
)

)
 (begin ((get-var shame))

)
)

)
)

)
 (begin (set-var! Victim  (call-yail-primitive yail-list-get-item (list (lexical-value resultList)
 1)
 '( list number)
 "select list item")
)

(if (call-yail-primitive string=? (list (get-var Victim)
 "me")
 '( text text)
 "text=")
 (begin ((get-var trollSelf))

)
 (begin (set-var! isJudge  #f)

((get-var genericTroll))

)
)

)
)

 )
(def (trollSelf)
(call-component-method 'TextToSpeech1 'Speak (list "I'm not going to help you masturbate.")
 '( text)
)

 )
(def (shame)
(call-component-method 'TextToSpeech1 'Speak (list (call-yail-primitive string-append (list (get-var Victim)
 "shouldn't make themselves out to be a judge, if they don't want to get castrated.")
 '( text text)
 "make text")
)
 '( text)
)

 )
(def (complimentaryAdjective)
 (call-yail-primitive yail-list-pick-random (list (call-yail-primitive make-yail-list (list "luscious" "lustrous" "scintillating" "elegant" "magnificent" "dewy" "soft" "unforgettable")
 '( any any any any any any any any)
 "make a list")
)
 '( list)
 "pick random item")
)
(def (trollJudge)
(call-component-method 'TextToSpeech1 'Speak (list (call-yail-primitive yail-list-pick-random (list (call-yail-primitive make-yail-list (list (call-yail-primitive string-append (list (get-var Victim)
 ", I've got some items for you to judge, if you know what I mean.")
 '( text text)
 "make text")
 (call-yail-primitive string-append (list "You're the only one I want to judge my items, " (get-var Victim)
)
 '( text text)
 "make text")
 (call-yail-primitive string-append (list "Are you an item, " (get-var Victim)
 "? Because you'd be worth all the points.")
 '( text text text)
 "make text")
 (call-yail-primitive string-append (list "Judge me, " (get-var Victim)
 ", judge me hard!")
 '( text text text)
 "make text")
)
 '( any any any any)
 "make a list")
)
 '( list)
 "pick random item")
)
 '( text)
)

 )
(def judgeList (call-yail-primitive make-yail-list (list "sarah" "leah" "paul" "rebecca" "daniel" "sam" "margaret" "julian" "alex" "chris" "ben" "jonathan" "grace" "cynthia")
 '( any any any any any any any any any any any any any any)
 "make a list")
)

(def (deprecatingAdjective)
 (call-yail-primitive yail-list-pick-random (list (call-yail-primitive make-yail-list (list "embarassed" "ashamed" "overwhelmed" "gobsmacked" "speechless")
 '( any any any any any)
 "make a list")
)
 '( list)
 "pick random item")
)
(def (bodyPart)
 (call-yail-primitive yail-list-pick-random (list (call-yail-primitive make-yail-list (list "lips" "eyes" "cheeks" "skin" "body" "beauty")
 '( any any any any any any)
 "make a list")
)
 '( list)
 "pick random item")
)
(def (effectsOnMe plural )
 (call-yail-primitive string-append (list (call-yail-primitive yail-list-pick-random (list (if (lexical-value plural)
 (begin  (call-yail-primitive make-yail-list (list "makes" "leaves" "renders")
 '( any any any)
 "make a list")
)
 (begin  (call-yail-primitive make-yail-list (list "make" "leave" "render")
 '( any any any)
 "make a list")
)
)
)
 '( list)
 "pick random item")
 " me as " ((get-var deprecatingAdjective))
 " as a " ((get-var unfavorableComparison))
)
 '( text text text text text)
 "make text")
)
;;; Screen1
(do-after-form-creation (set-and-coerce-property! Screen1 'Title "Seduction for Dummies" 'text)
)
;;; TableArrangement1
(add-component Screen1 TableArrangement TableArrangement1 (set-and-coerce-property! TableArrangement1 'Columns 3 'number)
)
;;; DoSweetNothing
(add-component TableArrangement1 Button DoSweetNothing (set-and-coerce-property! DoSweetNothing 'Column 0 'number)
(set-and-coerce-property! DoSweetNothing 'Row 0 'number)
(set-and-coerce-property! DoSweetNothing 'Text "Creepy" 'text)
)
(define-event DoSweetNothing Click()
 (if (get-var isJudge)
 (begin ((get-var trollJudge))

)
 (begin ((get-var genericTroll))

)
)

)
;;; RandomLine
(add-component TableArrangement1 Button RandomLine (set-and-coerce-property! RandomLine 'Column 1 'number)
(set-and-coerce-property! RandomLine 'Row 0 'number)
(set-and-coerce-property! RandomLine 'Text "Corny" 'text)
)
(define-event RandomLine Click()
 (if (and-delayed   (get-var isJudge)
 (call-yail-primitive <= (list (call-yail-primitive random-integer (list 1 3)
 '( number number)
 "random integer")
 1)
 '( number number)
 "<=")
)
 (begin ((get-var trollJudge))

)
 (begin ((get-var genericTroll))

)
)

)
;;; Label1
(add-component TableArrangement1 Label Label1 (set-and-coerce-property! Label1 'Column 0 'number)
(set-and-coerce-property! Label1 'Row 1 'number)
(set-and-coerce-property! Label1 'Text "Current victim" 'text)
)
;;; TheCurrentVictim
(add-component TableArrangement1 TextBox TheCurrentVictim (set-and-coerce-property! TheCurrentVictim 'Column 1 'number)
(set-and-coerce-property! TheCurrentVictim 'Hint "Hint for TextBox1" 'text)
(set-and-coerce-property! TheCurrentVictim 'Row 1 'number)
(set-and-coerce-property! TheCurrentVictim 'Text "Grace" 'text)
)
;;; AcceptVictim
(add-component TableArrangement1 Button AcceptVictim (set-and-coerce-property! AcceptVictim 'Column 2 'number)
(set-and-coerce-property! AcceptVictim 'Row 1 'number)
(set-and-coerce-property! AcceptVictim 'Text "OK" 'text)
)
(define-event AcceptVictim Click()
 ((get-var setTheVictim) (call-yail-primitive string-split-at-spaces (list (get-property TheCurrentVictim Text)
)
 '( text)
 "split at spaces")
)

)
;;; Label2
(add-component Screen1 Label Label2 (set-and-coerce-property! Label2 'Text "Snell-Hitchcock: The Dark Side of the Quad" 'text)
)
;;; TextToSpeech1
(add-component Screen1 TextToSpeech TextToSpeech1 )
(init-runtime  #f)


